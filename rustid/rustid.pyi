from typing import Optional, List

class UUID:
    def __init__(self, hex: Optional[str] = None, bytes: Optional[bytes] = None) -> None: ...
    @property
    def hex(self) -> str: ...
    @property
    def bytes(self) -> bytes: ...
    @property
    def version(self) -> int: ...
    @property
    def variant(self) -> str: ...
    def short_id(self) -> str: ...
    def base64(self) -> str: ...
    def int(self) -> int: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...

def uuid1() -> UUID: ...
def uuid4() -> UUID: ...
def uuid7() -> UUID: ...
def uuid4_batch(count: int) -> List[UUID]: ...
def uuid7_batch(count: int) -> List[UUID]: ...
def short_id() -> str: ...
def short_id_batch(count: int) -> List[str]: ...
def nano_id(size: Optional[int] = None) -> str: ...
def nano_id_batch(count: int, size: Optional[int] = None) -> List[str]: ...

NAMESPACE_DNS: UUID
NAMESPACE_URL: UUID
NAMESPACE_OID: UUID
NAMESPACE_X500: UUID

__version__: str